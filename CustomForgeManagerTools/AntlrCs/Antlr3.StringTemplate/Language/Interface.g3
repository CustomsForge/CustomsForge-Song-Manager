/*
 [The "BSD licence"]
 Copyright (c) 2005-2008 Terence Parr
 All rights reserved.

 Grammar conversion to ANTLR v3 and C#:
 Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in the
	documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
	derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
grammar Interface;

options
{
	language=CSharp3;
}

tokens
{
	INTERFACE = 'interface';
	OPTIONAL = 'optional';
}

@lexer::namespace {Antlr3.ST.Language}
@parser::namespace {Antlr3.ST.Language}

public
groupInterface[StringTemplateGroupInterface groupI]
@init
{
	this.groupI = groupI;
}
	:	'interface' name=ID {groupI.Name = $name.text;} SEMI
		( template[groupI] )+
		EOF
	;


template[StringTemplateGroupInterface groupI]
@init
{
	string templateName = null;
}
	:	(opt='optional')? name=ID LPAREN (formalArgs=args)? RPAREN SEMI
		{
			templateName = $name.text;
			$groupI.DefineTemplate( templateName, $formalArgs.args ?? new System.Collections.Generic.SortedList<string, FormalArgument>(System.StringComparer.Ordinal), opt!=null );
		}
	;

args returns[System.Collections.Generic.SortedList<string, FormalArgument> args]
@init
{
	$args = new System.Collections.Generic.SortedList<string, FormalArgument>(System.StringComparer.Ordinal);
}
	:	a=ID {$args[$a.text] = new FormalArgument($a.text);}
		( COMMA b=ID {$args[$b.text] = new FormalArgument($b.text);} )*
	;

//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
// LEXER

ID	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')*
	;

LPAREN	:	'(';
RPAREN	:	')';
COMMA	:	',';
SEMI	:	';';
COLON	:	':';

// Single-line comments
SL_COMMENT
	:	'//'
		(~('\n'|'\r'))* (('\r')? '\n')?
		{ $channel = Hidden; }
	;

ML_COMMENT
	:	'/*' .* '*/'
		{ $channel = Hidden; }
	;

WS
	:	(	' '
		|	'\t'
		|	'\f'
		|	('\r')? '\n'
		)+
		{ $channel = Hidden; }
	;
